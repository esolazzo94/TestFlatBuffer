// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace TestFlatBuffer.SerializeClass
{

using global::System;
using global::FlatBuffers;

public struct Person : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Person GetRootAsPerson(ByteBuffer _bb) { return GetRootAsPerson(_bb, new Person()); }
  public static Person GetRootAsPerson(ByteBuffer _bb, Person obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Person __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public Person? Parent(int j) { int o = __p.__offset(6); return o != 0 ? (Person?)(new Person()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ParentLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Person> CreatePerson(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset parentOffset = default(VectorOffset)) {
    builder.StartObject(2);
    Person.AddParent(builder, parentOffset);
    Person.AddName(builder, nameOffset);
    return Person.EndPerson(builder);
  }

  public static void StartPerson(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddParent(FlatBufferBuilder builder, VectorOffset parentOffset) { builder.AddOffset(1, parentOffset.Value, 0); }
  public static VectorOffset CreateParentVector(FlatBufferBuilder builder, Offset<Person>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateParentVectorBlock(FlatBufferBuilder builder, Offset<Person>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartParentVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Person> EndPerson(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Person>(o);
  }
  public static void FinishPersonBuffer(FlatBufferBuilder builder, Offset<Person> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPersonBuffer(FlatBufferBuilder builder, Offset<Person> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
