// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SerializeClass
{

using global::System;
using global::FlatBuffers;

public struct NickName : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NickName GetRootAsNickName(ByteBuffer _bb) { return GetRootAsNickName(_bb, new NickName()); }
  public static NickName GetRootAsNickName(ByteBuffer _bb, NickName obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NickName __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public Person? Value { get { int o = __p.__offset(6); return o != 0 ? (Person?)(new Person()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<NickName> CreateNickName(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      Offset<Person> valueOffset = default(Offset<Person>)) {
    builder.StartObject(2);
    NickName.AddValue(builder, valueOffset);
    NickName.AddId(builder, idOffset);
    return NickName.EndNickName(builder);
  }

  public static void StartNickName(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, Offset<Person> valueOffset) { builder.AddOffset(1, valueOffset.Value, 0); }
  public static Offset<NickName> EndNickName(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 4);  // id
    return new Offset<NickName>(o);
  }

  public static VectorOffset CreateSortedVectorOfNickName(FlatBufferBuilder builder, Offset<NickName>[] offsets) {
    Array.Sort(offsets, (Offset<NickName> o1, Offset<NickName> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static NickName? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new NickName().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
